#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent

agent.set_weight(os.path.basename(__file__), 0) # Validation step, no task progress at all

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)
# we are restoring, do not test
if data.get('restore', False):
    sys.exit(0)
    
# Connect to redis
rdb = agent.redis_connect()

providers = agent.list_service_providers(rdb, 'imap', 'tcp', {
    'module_uuid': data["mail_server"],
})
# function to test get-alaways-bcc
def get_always_bcc(email):
    mail_id = providers[0]["module_id"]
    response = agent.tasks.run(f"module/{mail_id}", action='get-always-bcc')
    agent.assert_exp(response['exit_code'] == 0)
    # check if the always_bcc is not set
    if response['output']['bcc'] == '':
        sys.exit(0)
    # check if the always_bcc is set to the email
    elif response['output']['bcc'] == email:
        sys.exit(0)
    else:
        agent.set_status('validation-failed')
        json.dump([{'field':'mail_server','parameter':'mail_server','value': response['output']['bcc'],'error':'always_bcc_is_already_set'}], fp=sys.stdout)
        sys.exit(2)


if providers:
    # we need to set bcc address for the mail server
    get_always_bcc('archive@'+os.environ['MODULE_ID'])
