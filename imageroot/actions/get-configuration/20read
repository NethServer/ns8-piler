#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import json
import sys
import agent
import subprocess

# Prepare return variable
config = {}

config["host"] = os.environ.get("TRAEFIK_HOST",'')
config["http2https"] =  os.environ.get("TRAEFIK_HTTP2HTTPS","False") == "True"
config["lets_encrypt"] =  os.environ.get("TRAEFIK_LETS_ENCRYPT","False") == "True"
config["mail_server"] = os.getenv("MAIL_SERVER", "")
config['retention_days'] = int(os.getenv("RETENTION_DAYS", 2557))

# function to test get-alaways-bcc
def get_always_bcc(mail_id):
    response = agent.tasks.run(f"module/{mail_id}", action='get-always-bcc')
    agent.assert_exp(response['exit_code'] == 0)
    # check if the always_bcc is not set
    if response['output']['bcc'] == '':
        return 'not_set'
    else:
        return response['output']['bcc'].removeprefix('archive@')

rdb = agent.redis_connect() # full read-only access on every key
modules=[]
# we query about all mail server to use it inside the user interface
for key in agent.list_service_providers(rdb,'imap','tcp'):
    node_name = rdb.get('node/'+ key['node'] + '/ui_name') or ""
    obj = {
        "module_id": key['module_id'],
        "module_uuid": key['module_uuid'],
        "mail_hostname": key['mail_hostname'],
        "ui_name" : "" if key['ui_name'] == None else key['ui_name'],
        "node": key['node'],
        "node_name": node_name,
        "bcc_set": get_always_bcc(key['module_id'])
    }
    modules.append(obj)

# use it inside a dropdown
config['mail_server_URL'] = modules

command = "/usr/bin/podman exec mariadb-app mysql -u root -D piler -e 'SELECT password FROM user WHERE uid=0;'"
output = subprocess.run(command, shell=True, capture_output=True, text=True)
is_found_admin = '$1$PItc7d$zsUgON3JRrbdGS11t9JQW1' in output.stdout

command = "/usr/bin/podman exec mariadb-app mysql -u root -D piler -e 'SELECT password FROM user WHERE uid=1;'"
output = subprocess.run(command, shell=True, capture_output=True, text=True)
is_found_auditor = "$1$SLIIIS$JMBwGqQg4lIir2P2YU1y.0" in output.stdout

config['is_default_password_admin'] = True if is_found_admin else False
config['is_default_password_auditor'] = True if is_found_auditor else False

# get the mail server module uuid
providers = agent.list_service_providers(rdb, 'imap', 'tcp', {
    'module_uuid': os.getenv("MAIL_SERVER", ""),
})
if providers:
    # we need to get bcc address for the mail server to display a warning in the UI if it is not set correctly
    config['always_bcc_correctly_set'] = True if os.environ['MODULE_ID'] in get_always_bcc(providers[0]["module_id"]) else False
else:
    config['always_bcc_correctly_set'] = False
# check if the piler service is running
piler_running = subprocess.run(['systemctl', '--user', 'is-active', "piler-app.service"], capture_output=True, text=True)
config['piler_is_running'] = True if piler_running.stdout.strip() == 'active' else False

# Dump the configuratio to stdout
json.dump(config, fp=sys.stdout)
