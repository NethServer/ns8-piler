#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

# Remove traefik route

import os
import sys
import json
import agent
import agent.tasks

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Find default traefik instance for current node
default_traefik_id = agent.resolve_agent_id('traefik@node')
if default_traefik_id is None:
    sys.exit(2)

# Remove traefik route
response = agent.tasks.run(
    agent_id=default_traefik_id,
    action='delete-route',
    data={
        'instance': os.environ['MODULE_ID']
    },
)
# retrieve the mail server module from the redis db
rdb = agent.redis_connect()
providers_old = agent.list_service_providers(rdb, 'imap', 'tcp', {
    'module_uuid': os.environ.get("MAIL_SERVER")
})

if providers_old:
    # we want to remove the relay from the mail server
    mail_id_old = providers_old[0]["module_id"]
    response = agent.tasks.run(f"module/{mail_id_old}", action='remove-relay-rule', data={
        "rule_subject": "archive@"+os.environ['MODULE_ID']})

    # function to test get-always-bcc
    def get_always_bcc(email):
        response = agent.tasks.run(f"module/{mail_id_old}", action='get-always-bcc')
        agent.assert_exp(response['exit_code'] == 0)
        # check if the always_bcc is set to the email
        if response['output']['bcc'] == email:
            return True
        else:
            return False
    # we need to verify if the always_bcc is set to this module, if true we need to remove it
    # in case of restoration of the module we want to prevent to remove the always_bcc set
    # to the restored new module
    if get_always_bcc('archive@'+os.environ['MODULE_ID']):
        response = agent.tasks.run(f"module/{mail_id_old}", action='set-always-bcc', data={
            "bcc": ""
        })
